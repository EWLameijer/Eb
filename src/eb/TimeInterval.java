package eb;

import java.io.Serializable;

/**
 * [CC]
 * The TimeInterval class stores a time interval, for example "3.5 hours". It 
 * stores the scalar ("3.5") and the unit ("hours") separately. (note that 
 * "3.5 hours" is a quantity, "hours" is the unit. Not sure how 3.5 would be 
 * called here, calling it a scalar is the best I can think of right now).
 *  
 * @author Eric-Wubbo Lameijer
 */
public class TimeInterval implements Serializable {
	
	// [CCCC] serial version UID, generated by default. Can be ignored for now.
	private static final long serialVersionUID = 4957903341568456588L;
	
	// [CCCC] The 3.5 in "3.5 hours". Indicates how many of the specified unit
	// go in the duration of this time interval.
	double m_scalar;
	
	// [CCCC] The "hours" in 3.5 hours. Indicates the unit of time used by this
	// interval
	TimeUnit m_unit;
	
	/** [CPPRCCC]
	 * Returns the time unit of this time interval (for example the enum 
	 * corresponding to "HOUR").
	 * @return the unit (like DAY) of this time interval object 
	 */
	TimeUnit getUnit() {
		// preconditions: none: constructor should have taken care of validity
		// of the contents of this time interval.
		return m_unit;
		// postconditions: none. Simply a getter, should not change anything.
	}
	
	/** [CPPRCCC]
	 * Returns the scalar value of the time interval (the 3.5 in "3.5 days").
	 * @return the scalar value of the TimeInterval object (the 3.5 in "3.5 days")
	 */
	double getScalar() {
		// preconditions: none: constructor should have taken care of validity
		// of the contents of this time interval.
		return m_scalar;
		// postconditions: none. Simply a getter, should not change anything.
	}
	
	/** [CPPRCCC]
	 * Initializes the value of the object to the given values.
	 * 
	 * @param scalar the scalar indicating how many of the units fit in the 
	 * duration of this time interval. The 2.5 from 2.5 minutes
	 * @param unit the unit of this time interval, like second, hour or minute
	 */
	private void init(double scalar, TimeUnit unit) {
		// preconditions: the scalar should be greater than 0, and the TimeUnit 
		// should have been properly initialized (so not be null).
		Utilities.require( scalar > 0, "TimeInterval.init error: " +
				"negative time intervals or intervals of length zero are not " +
				"permitted.");
		Utilities.require( unit !=  null, "TimeInterval.init error: " +
				"the unit of time has not been properly initialized yet.");
		
		m_scalar = scalar;
		m_unit = unit;
	  // postconditions: none. Should have worked.
	}
	
	/** [CPPRCCC]
	 * TimeInterval constructor, creates the time interval object as being of
	 * length 'scalar units' (like 2.5 minutes).
	 * 
	 * @param scalar the scalar indicating how many of the units fit in the 
	 * duration of this time interval. The 2.5 from 2.5 minutes
	 * @param unit the unit of this time interval, like second, hour or minute
	 */
	TimeInterval(double scalar, TimeUnit unit) {
		// preconditions: handled by init
		init(scalar, unit);
		// postconditions: handled by init
	}
	
	/** [CPPRCCC]
	 * Copy constructor, useful for initializing a new TimeInterval object with
	 * an old one, without being dependent of the original object staying the 
	 * same.
	 * 
	 * @param intervalToBeCopied the interval of which the values must be copied
	 * to the new instance of TimeInterval
	 */
	TimeInterval(TimeInterval intervalToBeCopied) {
		// preconditions: the input interval should not be null
		Utilities.require( intervalToBeCopied != null, 
				"TimeInterval(TimeInterval) error: the time interval to be copied " + 
		    "should not be null");
		init(intervalToBeCopied.m_scalar, intervalToBeCopied.m_unit);
		// postconditions: none. Simple copy, should go okay.
	}
}
