*Strategy: if 4x10 test works sufficiently AND saving project works to
phase 2, switch Programming to it 
+ start Chinese [5 min per 120 min non-maintenance]. 
Otherwise, debug until 4x10 continuously sufficiently satisfied with performance

Archive to random directory:
Text field can now grow in size appropriately
But actually, a label would be enough, one should not need to/be able to change the directory by editing. Only one way to do something...




Current projects:
Bugs (urgent) [after again tolerating the new version] Mon/Tue/Wed/Thu
	Summarizing panel shows up empty!
	
Core features:
	-1.3: read archive from textfile
	-1.4: [m] [p] easy to make
	-1.5: make deck list and add command to go to next deck
	-2.0: get timer working 
	-2.1: ?
	-3.0: get delayed review working 
	-4.0: get perceptual learning working
	-4.1: Add an Eb icon
Small features
	?
Larger features (consider carefully)
	?
Refactorings:
	?


?3field: so [m]/[p] automatically

Test 1 (di 17/5) Okay, works well.
Test 2 (wo 18/5) Okay, works well.
Test 3 (do 19/5) Okay, works well.
Test 4 (vr 20/5) Okay, works well.

Urgent ***Saving project: on closing Eb or changing deck, save contents of cards to
text file deckname_DDMMYY_HHMM.txt (in alphabetical order)
*** Phase 2: allow user to set the saving location of the txtfile (Study options window)  

??? Log in archiving window to see current status of deck (like Spanish tm Phrases)
? Having tabs that can be used to switch decks.
Timer project







4) let the review start as soon as the "start" button on the starter panel is pressed
5) ensure that if the card was timed out, there is no remembered or forgotten button, 
just a next button.
6) in the summarizing screen, add text indicating the number of timed-outs 

[DONE]
1) create a timed combobox in the options window
1b) add the status of the timed combobox to the equality comparisons.
1c) also make changing the status of the combo box signal unsaved changes. Perhaps make it a subclass of a generic “InputElement” that defines a signalling method as 
well as an equality operator.
2) create a (sometimes visible) TimeInputElement for the timer in the options window.
	2a) Based on how the TimeInputElement handles the combo box, set the combo box to
	    the correct value (instead of setting it to "normal" automatically
	2b) ensure that setting the status to normal or timed properly updates the 
	    visibility of the timer-time box.
	    	3a) Create an extra panel
	3b) Add it to the total layout
	3c) Create "Yes" and "No" buttons, and add those to the panel.
		3d) if "No" button is clicked, go to basic window with Review
			3f) If in reactive mode and option is timer: show timer window
	3e) Make the review button show Review - timed - X seconds
	3) if in reactive state and there is a review and the review is timed, show a starter 
panel to let the user start the review.

Bugs (to be solved before submission. Then 4x10 new words as test)


What is going wrong?
methods in CardEditingManager and CardEditingWindow don't have clear names 
and clear responsibilities.

CardEditingManager:
	Responsibilities:
		-opens and closes/disposes CardEditingWindow =>
		-initializes CardEditingWindow with the correct front and back =>

CardEditingWindow
	Responsibilities:
		-returns user-provided values to the CardEditingManager => 
		  calls cardEditingManager.processProposedContents




Edit card; Ctrl+E
Kan ook gewoon (done/failed laten zien)
when switching decks, also ensure that both front and back are replaced on the screen.

Still can get message: the front of a card cannot be blank when OKing an empty window.

Important: edit cards.
<avoid editing same card twice?>

Quality of life:
-intelligently suggest deck after seeing the letters the user types in load deck (so S->Spanish)
-allow synchronizing with a text file (automatic reading from and writing to; 2 x tab as delimiter)
-Macros for ease: E -> [EN], n-> <+g> or function to create 2/3/4-sided cards
?Allow right hand panel to show answered cards.
?Pane/Window for browsing cards?

Refactoring
-MessageBoard, enum EventType 
-verwijder duplicate "last_reviewed_deck" strings
-nullness preconditions from Guava?
-Split panel in reviewing pane, so only need one Edit button

Modes:
timed: no yes [if yes: timer]
feedback: immediate, delayed
mode: normal, perceptual [if perceptual: number of alternatives]


Next experiment: allow the user to set a timer for answering
?NextNext experiment: implement perceptual learning
?NextNext experiment: words vs phrases experiment 
?NextNext experiment: show answers only at end-experiment.
?NextNext experiment: 'spring cleaning' option.






Note: I want to refactor; I'm getting huge lists of panels and such.







g) make the main window show the time till review of the first card (in seconds [clock])
	First: allow Deck to get the time till first review (if there are more than 0 cards)
	update 1: make this dynamic YES!
	update 2: make the time correct (so work on the formula!) OK
	Okay. I can now show the layout.
	
	Subparts:
	a) be able to show text in the two panes
	a2) get the text from the reviewable card.
	b) be able to hide the red pane 
	c) make shortcut alt-H to show the red pane (history)
	d) make bottom pane also a card layout 
	e) 
	
	
Third screen:
-All cards answered BTN[Return to information window]
-Still @cards left to study. Want to do another round? BTN[YES] BTN[NO]

information window: 

Hmm... the challenge is 
The program has a few statuses
1) reactive (normal mode, switches to review when it is time)
2) reviewing
3) informational (fixed information, but will review). Has button for review 
4) summary: shows the summary window
	
	
	
15:20 How to show the text? Well, g to g2 may be needed.
Well, needed super.paintComponent(g) first
15:37
15:58 Wel, ik kan nu redelijk centreren; alleen de breedte - hoe zie ik de breedte van de string?
16:05 Voor de volgende stap moet ik een kaart laden. Nu hebben het front en het back panel andere behoeften. Hoe is het in pseudotaal?

Wel, het review panel wordt alleen geladen als er een actuele kaart is.
Dus het ReviewPanel moet dus van het ReviewObject de 'currentCard' trekken. Dat wil zeggen: de front en de back tekst.
Het reviewpanel geeft de front tekst door aan het front panel, en wacht tot "Show answer" ingedrukt wordt.
Grr... moet dus eerst weer een kleine CardLayout maken. Hoe dan ook, gedaan.
Hmm... En nu dus een setText voor de CardPanels.
Okee, dat werkt als ik tenminste repaint.

Okee. wat moet er nu gebeuren?
Wel, het is het handigste als er een 'reviewer' is.
De reviewer heeft een set van kaarten [max number van X].
Access: 
	-getCurrentFront()
	-getCurrentBack()
	-wasRemembered(boolean)
	
Okee. Hoe moet de reviewer intern werken?
Wel, hij wordt geinitialiseerd met een lijst van kaarten (max X, wat ergens te specificeren moet zijn)



	
	

-Flow
-Glossary (domain knowledge, and what means what)
-HowTo (bepaalde veranderingen doorvoeren)
-Map (where the data is) => Just for classes
-Design
-Problems & Ideas (things that we may want to change)


General change framework

1. Change 
2. Errors
3. Sweep [changes] // git diff / check
4. Test
5. Commit

Now at status: ?.?


Flow

*Starting Eb*

The program start shows Eb's main window. This window either shows a random card of the current deck to be studied, or, if there are no cards to be studied, a text indicating Eb's basic commands as well as some statistics on the current deck, like its size.

*Doing things with Eb*

There are some things you can always do with Eb, and other things that you can only do when there are cards to be studied.

The 'general things':

-Saving the current status & quitting Eb: Ctrl-Q, or, in the menu bar, File->Quit.

-Adding a card: Ctrl-N, or, in the menu bar, Manage Deck->Add Card. More on adding cards in the section "*Adding cards*"

-Displaying the study options menu: Ctrl-T. More on the study options menu in the section "The Study Options Menu"


*Adding Cards*

Pressing "Ctrl-N" will open a card adding frame. This frame will be closed (without saving its data), by pressing 'escape' or clicking on the Cancel button. But most of the time, of course, you will want to use it to add cards. 

Adding cards is easy: you type in text in the top field (this is the 'front' of the card, which will be shown as the question/cue when you review the cards). Then you either click on the field below, or, more conveniently, press <Enter> if you are done filling in the text on the front. This will allow you to fill in the text for the back of the card, the 'answer'. When you are done, either press the "OK" button or simply press <Enter> again to add the new card to the collection.

Note that if the front of the card is empty, or a duplicate of the front of another card, Eb will complain and refuse to add the card until the front has some contents and is unique. *view duplicate-functionality?*


*The Study Options Menu*

Each learner is unique, and so is the structure and difficulty of each deck. For example, when learning the capitals of the American states, you can easily review them 10 hours later after first adding the card. For studying say Russian vocabulary, 5 or 10 minutes may be a more appropriate time for the first repetition. In the Study Options menu you can set such deck characteristics to values that fit the deck and your preferred style of study. It even allows you to experiment with different study methods!

The first parameter you can set is the "Initial interval", which is the time Eb lets pass after you added the card before it presents the card to you for the first review. If the deck is hard, you may want to choose 10 minutes; for an easy deck, 3 hours or even one day would be appropriate. The rule of thumb is that you should be able to answer between 80% and 95% of cards correctly at a repetition. *@Eb gives feedback?*

General note about filling in fields: please use the 'normal' typing of your locale. So 3.6 would work for the US, and 3,6 for the Netherlands, for example.



%%% For programmers %%%

% Starting Eb %

Eb is started by invoking the main() method of the MainWindow() class.

% Design %

Most of Eb is rather straightforward: windows that pop up, listeners to UI elements, and so on.

The things I'm currently struggling with with Eb involve two aspects:
1) serialization/deserialization
2) the architecture of the Deck-object.

% Serialization %

Serialization: having been involved in maintaining software that has 'backward compatibility challenges', and also because (if successful) Eb will grow, getting a proper format for serializing data will be very handy. The ideal serialization solution would be:
a) very maintainable (so backward compatibility ensured without huge reams of "if (versionNumber<...)" statements)
b) minimizes boilerplate code.

Currently, Eb uses Java serialization which is very 'unboilerplaty' to program, but not maintainable (you can throw away each deserialized object as soon as you add a field somewhere - okay, that is not entirely true, you can add new fields, but you need to keep the serializion ID the same then, which may not be that good an idea).
What should really happen with Eb's serialization:
You have an object (or a collection of objects). Each object has a number of properties (say: key-value pairs).
When reading an object from file, fill in the member variables based on the names. If there is no key corresponding to the member variable, try recreate its value as best you can (for example: has they key been renamed? Can it be deduced from other data? Or should it just be initialized to a default value?).
Basically, you want to store and read a (nested) map, that you can update intelligently, or at least .
While it is of course possible to homebrew your own format, using some standard notation/parsers can save lots of maintenance work, especially as I don't consider it my core business to invent improved data serialization formats. 

The most common formats that are available for serialization/deserialization:
XML
JSON
YAML
Google Proto 
BSON

Any of these formats would be okay; they differ in human-readableness (YAML>JSON>XML | GProto and BSON not) and efficiency (GProto likely best, followed by BSON). My current decision is to first get Eb working decently, and if it is successful/changing enough to warrant a better serialization system, switch to Google proto. If debugging turns out to be the main problem, I'll link to a YAML library first.

% The architecture of the Deck object %

What is a Deck? Purely logically, a deck is a set of cards, each of which have their front and back and revision history. In practice, however, this is only true for an abstract (and fresh) deck. A deck, if things go right, becomes a tool to be shaped to the learner's mind, both by keeping records on each card of how well it has been remembered, as well as generic deck settings (the interval between the creation of the card and the first time it should be shown is likely different between a Java deck and a Russian deck). In principle, these data are separable; in practice, it's more convenient to store the deck settings and learning  of the deck together with the logical contents of the cards.

At a certain time, Eb can only have a single active deck. This suggests some constraint on the number of Deck objects that one can create at a time; a singleton pattern or monostate pattern jump to mind, or even a static class. None of those options look particularly appealing at this time; monostate is misleading, suggesting that one can create multiple independent objects while in reality all data is shared; a static class is (at the moment) pragmatically impossible because that doesn't work with serialization, and a singleton pattern, while 'correct', introduces the boilerplate .getInstance() everywhere. Another problem is that the 'logical' deck should have some kind of interaction with the GUI - interactions that are not part of the logical contents of the deck (if a new deck is loaded, it should not need to learn about how to update the GUI). For this reason, I created a static "Deck" class that contains a pointer to the logical deck (a regular class called 'LogicalDeck'. The Deck is kind of like the office manager, forwarding content-related calls to the LogicalDeck, and handling the messy work of interacting with the GUI, so the GUI elements are all anchored in the Deck, and things don't have to change when the logical deck is swapped (say from Java to Japanese).

This approach has some drawbacks, mainly that many Deck functions are kind of 'middleman' functions and most require checks to ensure the validity/existence of the logical deck, but, barring further insights, this seems the least bad solution at the moment. 




 



The Study Options window reads values from (and sets) StudyOptions objects. The StudyOptions class has a getDefault factory method, which calls the private constructor, setting all options to their default values. It also has data members like m_initialInterval which contain the length of the interval between creating the card and the first required review. Of course, Eb has default values for the initial interval (DEFAULT_INITIAL_INTERVAL). The TimeInterval values are assigned using constructors, copy constructor and init, getUnit() and getScalar() return the unit (like HOUR of "3 hours") and the scalar (the 3 of "3 hours") respectively. And StudyOptions adds the "getInitialInterval" to access its data.

GUI-wise, the doubleToMaxPrecisionString is used to create the numbers in the right format (max 2 places of precision)
***Return to deck's current settings - extra button




Glossary

-Card: one of the cards that is studied. A card has contents (front and back, 'stimulus' and 'response', as well as a history (number of repetitions and failure rate and such).
-Deck: a collection cards that can be studied
-Instant: (Java-term) a certain point in time (so time+data). Like December 9th, 2011, 11:05 GMT. This was a specific timepoint in history, even if it would have been say 12:05 in Amsterdam at that time - but December 9th, 2011, 12:05 CET refers to the same instant. Using instant as it is more appropriate than date (which is too rough) or time (which is not unique, as the hours, minutes and seconds repeat every day)
-Review: an individual review (with data like how long it took etc.)
-Study Options: the collection of options that determines how a SRS deck is to be studied, for example the interval before the first repetition, how much the study interval should increase upon success, whether there is a maximum time the student has before he or she may answer, and so on.

HowTo

-Check whether a string is null or empty: Utilities.isStringNullOrEmpty
-Check whether a string is a valid identifier/token: Utilities.isStringValidIdentifier
-Check whether an error has occurred which has to lead to program end (or a warning!) Utilities.require
-Check whether the user has pressed Escape and therefore the cancel button needs to be pressed: EscapeKeyListener (inner class in NewCardWindow)
-Check whether the user has pressed Enter and therefore (for example) the ok-button needs to be pressed: EnterKeyListener (inner class in NewCardWindow)
-Change a component (especially a text-containing component) so that tab and possibly enter won't influence the text, but will cause the focus to shift: Utilities.makeTabTransferFocus and Utilities.makeTabAndEnterTransferFocus  
-Add a system-specific line break: Utilities.EOL

Coding style: 
	*exceptions: if you use "Pokemon exception handling" ('catch (Exception e)'), add e.printStackTrace(); [ERROR 1]
	*require: Class.methodName() error: message. If constructor: Class() or Class(Type[,Type]). Example Utilities.require(Utilities.isStringValidIdentifier(deckName), "Deck.getDeckFileHandle() error: deck name is invalid.");

Construct a class 

Construct a method [CPPCCC]
	-preconditions
			-parameters
			-global settings?



Map
-DeckChangeListener: an interface for objects that need to know when the contents of the current deck has been changed; it is a functional interface, containing only one method, respondToChangedDeck
-Deck: THE deck used by Eb, basically a wrapper for the current deck (like "Chinese.deck") which is a LogicalDeck object. Has contents (m_contents) and contains the name of the deck that should be loaded by default (called "default")
-LogicalDeck: a (logical) deck, with a name and a list of cards
-Extension: the extension of a deck file (".deck") is called DECKFILE_EXTENSION found in the DECK class
-Utilities: contains all kinds of things that are not domain specific
-MainWindow: the main window of the application
-NewCardWindow: a window in which the user can create a new card, which is to be added to the deck.
-StudyOptions: the collection of options that determines how a SRS deck is to be studied, for example the interval before the first repetition, how much the study interval should increase upon success, whether there is a maximum time the student has before he or she may answer, and so on.
-StudyOptionsWindow: a window in which the user can set the study options, like the intervals to be used.
-TimeInputElement: a UI-element that allows users to see (or set) a time, like "0.1 seconds" or "3 day(s)"
-TimeInterval: stores a time interval, like 3 hours (the 3 can be a double) Contains a m_scalar (the 3.5 from 3.5 hours) and a m_unit (the hour from 3.5 hours), which are set by the constructor (which also requires time intervals to have length > 0)
-TimeUnit: enum of times, of SECOND, MINUTE. Stores both string names ("second(s)") [m_name] and time value (Durations) [m_duration]

Design
1) Create a window called "Eb", and display the commands as well as the number of cards in the currently loaded deck => Jan 9th, 2016
2) Create a menu containing a Save and Quit-button, allow it to be activated by pressing 'Ctrl-Q', and make it work to quit Eb => Jan 10th, 2016
3) Create a Ctrl-N item that produces a window that allows the user to add a new card to the current deck  => Feb 8th, 2016
5) Allow reviewing cards [add option window to set interval]
	a) Add a Ctrl+T option to the help label, that there is also an option window Feb 8 2016
	b) Add a menu option, including Ctrl+T  Feb 8 2016
	c) let Ctrl+T from menu or shortcut open the Study Options window. Feb 8 2016
	d) Give the study options window a label, a textbox, and a combobox (sec...years) Feb 8 2016
	e) Add buttons: back to study, reset to default, set study settings to this  Feb 9 2016
	f) Ensure the cancel button works Feb 9 2016
	g) Ensure the default button works Feb 16 2016
	g2) check all code and documentation. (Feb round, +28 days RtM)
	h) Add the mention of a third option (Ctrl-T) to the Main window March 28 2016
	h) Ensure the save button works (implement a Study Settings object and data member in DeckContents) March 28 2016
	i) Ensure that the cancel button reads 'discard unsaved changes' March 28 2016
	j) check what happens when a timebox is filled with 3..6 or whatever => FAILS! 3..6 is permitted. Fix this. => April 19 2016
	k) Make 'changes saved'- 'changes unsaved' part of the StudyOptions window => April 21 2016
	l) make the main window show the time till review of the first card (in seconds [clock]) => April 21 2016
	
	// timed? bool and timedinterval
	5) Add the possibility to review cards
	
		
	h) Ensure that the main window, upon loading and in a cycle of 1 minute checks whether there are reviewable cards, loads these into a 'batch'
	i) Make main-window in review mode (know - don't know)
	j) after reviewing the batch, checking again whether there are new cards to review, calling that the next batch.
	k) add option for failed cards - rotating batch or stew (option minutes)
6) Add repetition schedule (absolute constant 1 day, relative factor X [absolute custom later?])
7) Eb and git: make the Git-dir contain Eclipse-dir (so with root and class). Add executable JAR (and test it somewhere)


@Version history:
R1.0. April 28, 2016. Eb can now be used for spaced repetition, at least cards can be created and reviewed, and one can set reviewing time.
	Total features:
	-3 modes: information mode, reviewing mode, summarizing mode 
	-5 (working) shortcuts: add card, quit Eb, create deck, load deck, and view/edit study options.
	-5 study opions: initial review interval, number of cards per reviewing session; base time to wait for re-reviewing remembered card; review time lengthening factor, time to wait for re-reviewing forgotten card.
	
R1.1 
	-New Card window will now also close when pressing OK in case of a totally empty card.
	-In the New Card window, all texts are now trimmed when the edited side of the card loses focus (or the enter key is pressed). So you don't have to clean up spaces manually!
	-when creating/switching a deck, the reviewing is now also correctly reset
	-Eb now restarts on the last used deck.
	-Ensured that loading a new window or starting Eb shows the proper deck name.
	-In reviewing mode, text now properly aligned if it is bigger than the raw size of the card panel.
	-The New Card window now uses internal scrollpanes to allow you to enter lots of text and be able to see it, even without resizing the window.
	-Renamed Ctrl+D that created a deck to Ctrl+K, as Ctrl+D is more intuitive for deleting a deck or card, and that use may be necessary later.
	-One can now edit cards!
	-Solved a bug in which the back (and front) of a card were not updated after editing a card.
	-Solved a bug in which creating a deck (while in review screen) did not switch to the new deck.
	-Solved a bug that when creating a deck/swapping a deck while in reviewing mode kept the "review" button visible in the main window, even if that was not appropriate.
	-Adding a new card will now bring the cursor back to the front of the field, as to fill in the next card more easily.
	-Pressing the "Enter" key in the summarizing screen now switches back to normal mode
	-Solved bug: when making a card with an same front: delete now properly closes dialog
	-Solved a bug in which the backup file did not save exotic characters correctly.

R1.2
	-Pressing 'E' now edits the card 
	-added mnemonics to the buttons in the review pane.
	-changed background of Edit Card to something not green.
	-solved a bug in which the shortcut keys of the review window occasionally did not work.
	-Added the option to save archiving files; these files can be saved to whatever directory one prefers.
	
R1.3
	-name of deck is now also shown on top of card editing window.
	-The ArchivingSettings window can now also be closed by pressing "escape"



Card	
	Card(String, String)
	addReview()
	getFront()
	getBack()
	[]getLastReview()
	[]getTimeUntilNextReview()
	[]hasBeenReviewed()
	reportReviews()

	
CardPanel
	
	
Deck 
	addCard()
	addDeckChangeListener()
	canAddCard()
	createDeckWithName()
	deckHasBeenLoaded()
	ensureDeckExists()
	getCardCount()
	getStudyOptions()
	loadDeck()
	notifyOfDeckChange()
	save()
	
DeckChangeListener
	[]respondToChangedDeck()
	
FixedSizeNumberDocument
	contentsShouldRepresentInteger()
	representsValidContents()
	
LogicalDeck
	addCard()
	canAddCard()
	getCardCount()
	getDeckFileHandle()
	getFileHandle()
	getStudyOptions
	isNotYetPresentInDeck()
	LogicalDeck()
	
MainWindow
	.respondToChangedDeck()
	getUICommands()
	getDeckSizeMessage()
	updateMessageLabel()
	openStudyOptionsWindow()
	MainWindow()
	saveAndQuit()
	openNewCardWindow()
	#main()
	
NewCardWindow
	EnterKeyListener
		keyPressed()
		keyReleased()
		keyTyped()
	EscapeKeyListener
		keyPressed()
		keyReleased()
		keyTyped()
	close()
	submitCandidateCardToDeck()
	NewCardWindow()
	init()
	display()
	
Review
	getInstant()
	wasSuccess()
	
StudyOptions
	getInitialInterval()
	StudyOptions()
	getDefault()
	
StudyOptionsWindow
	close()
	loadEbDefaults()
	loadCurrentDeckSettings()
	StudyOptionsWindow()
	init()
	showStudyOptionsWindow()
	updateTitle()

TimeInputElement
	getInterval()
	setInterval()
	TimeInputElement()

TimeInterval
	getUnit()
	getScalar()
	init()
	TimeInterval()
	TimeInterval(TimeInterval)
	
TimeUnit
	TimeUnit()
	getUserInterfaceName()
	getUnitNames()
	
Utilities
	doubleToMaxPrecisionString()
	EOL
	getDecimalSeparator()
	isDecimalSeparator()
	isStringValidIdentifier()
	makeTabTransferFocus()
	makeTabAndEnterTransferFocus()
	representsFractionalNumber()
	representsInteger()
	representsPositiveFractionalNumber()
	require()
	stringToDouble()
	
	
	


Problems & Ideas
Problem 1: DeckManager.getInstance().getCurrentDeck().getCardCount() is ugly
Problem 2: Hard to undo changes, no version control yet.
Problem 3: I have to ensure that whenever I create or load a deck, it gets the MainWindow as listener for DeckChangeEvents. Okay. may need to make the deck a singleton.
Problem 4: who should take the responsibility for giving the filehandle? I guess the DeckContents, as that has the name.
Problem 5: Can I factor out the close operations?
Problem 6: fundamentally, the DeckContents have study options,

Problem 1 -
Option 1: If I make Deck a singleton class I get
	Deck.getInstance().getCardCount(), which is at least a bit better
Option 2: If I make Deck a static class, I get 
	Deck.getCardCount(), which is what I want. However, this has two disadvantages:
	1) I can't use serialization/deserialization anymore for load/save, as my data members are static now. This is very annoying!
		This could be solved with Google Proto, database calls or XML creation, but each takes a few hours to master sufficiently. Parsing/deparsing
		is also possible, but is not very maintainable and will incur continuous overhead.
	2) as I won't be returning 'Deck' and such, it is harder to indicate success and failure of something. I mean: I can throw exceptions
	   if a deck is not found, but you shouldn't use exceptions for normal program behaviour. I can give a return value, but return values
	   can happily be ignored, especially if they don't contain vital information (like the Deck). I can give 'success' as a second argument, but
	   while that may be harder to ignore, Java passes by value and wrapping something in an boolean object seems overkill. I can use a 'canLoadDeck' 
	   function, and barf an assert/runtime crash if it is not used properly, but needing to define an extra function for every function 
	   that can legally fail is also not elegant.
Option 3: I can make DeckManager 'wrapping' functions, so DeckManager.getCardCount() calls the full DeckManager.getInstance().getCurrentDeck().getCardCount() 
	However, this is ugly as it leads to interface duplication, wrapping all Deck's methods in 
	
Ideas
Better error message; either front or duplicate.

Erghh... now reviewPanel gives an exception; basically because one tries to update the view, while it is the controller that should be responsible for updating it

TASK:

USER:
	Main window  - modes:
		-REACTIVE: shows number of cards in deck + time till next review + shortcut keys. Time to next review is positive
		-INFORMATIONAL: same as informational window, but time till next review is negative. Possesses button to start review.
		-REVIEWING: shows card that is to be reviewed
		-SUMMARIZING: shows statistics of last round of reviews.
		
	1. New card/edit card window:
		Shows front and back of new card or of card being edited 
		
	2. Study options window:
		Shows ways in which to customize the study options 
		
	3. Archive settings window:
		Shows where the deck gets archived.
		

	Options (6):
		-Quit: Ctrl + Q
		-Create New card: Ctrl + N => opens SW1
		-Create deck: Ctrl + K
		-Open Study options window: Ctrl + T 
		-Open Archive settings window: Ctrl + R
		-Load Deck: Ctrl + L
		
Currently 36 classes - too many for 1 level. Split!
=> 31 classes. Nice!
Eb - Eb = ok
Eb.data: Card, Deck, LogicalDeck, review = OK
Eb.eventHandling: BlackBoard, listener, UPdate, updatetype = Ok
Eb.mainWindow: cardPanel, mainWindow. MainWindowState, Reviewer, ReviewPanel, SummarizingPanel, TimedReviewStartPanel; 3 have to do with reviewing, extract them!




